## String Equality Assert Examples 
Assert.That(fullname, Is.EqualTo("Sarah Smith"));
Assert.That(fullname, Is.EqualTo("SARAH SMITH").IgnoreCase);
Assert.That(fullname, Is.Not.EqualTo("Gentry Smith").IgnoreCase);

## Numerical Equality Assert Examples - adding tolerance (plus or minus)
Assert.That(result,Is.EqualTo(3.3).Within(o.01)); // test will pass if the result is 3.29 or 3.31
Assert.That(result,Is.EqualTo(101).Within(1).Percent); // test will pass if the result within 1 percent

// Also available 
Is.Positive // Is the number positive
Is.Negative // Is the number negative
Is.NaN // Is the number not a number


## Date Time Equality
AssertThat(result,Is.EqualTo(new DateTime(2000,1,1,0,0,0,0)));
AssertThat(result,Is.EqualTo(new DateTime(2000,1,1,0,0,0,1)).Within(TimeSpan.FromMilliseconds(1))); // adding tolerance using time span
AssertThat(result,Is.EqualTo(new DateTime(2000,1,1,0,0,0,1)).Within(1).Milliseconds); //adding tolerance, same as the previous method 

## Asserting ranges 
AssertThat(result, Is.GreaterThan(100));
AssertThat(result, Is.InRange(101,200));

// Also available 
Is.GreaterThanOrEqualTo()
Is.LessThan()
Ts.LessThanOrEqualTo()

## Assert Nulls / Booleans
AssertThat(sut.Name , Is.Not.Empty);
AssertThat(sut.Name , Is.Null);
AssertThat(sut.Name , Is.Not.Null);
AssertThat(sut.IsNoobSetToTrue , Is.True);
AssertThat(sut.IsNoobSetToTrue , Is.False); // Will fail 

## Collections method 
private void CreateStartingWeapons()
{
Weapons = new List<string>()
{
  "Short Sword",
  "Short Bow",
  "Long Bow",
  
  //"Long Bow"
   //"Staff Of Wonder"
  };
}

## Assert on collections 
//Check an item is not empty
var sut = new PlayerCharacter();
Assert.That(sut.Weapons, Is.All.Not.Empty);

//Check that the collection contains an item 
Assert.That(sut.Weapons, Contains.Item("Long Bow"));

//Should have one kind of sword
Assert.That(sut.Weapons, Has.Some.ContainsSubstring("Sword"));
